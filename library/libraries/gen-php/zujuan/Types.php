<?php
namespace addQuestion;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class PageQuestion {
  static $_TSPEC;

  public $question_id = null;
  public $paper_id = null;
  public $is_delete = null;
  public $question_origin = null;
  public $category_id = null;
  public $course_id = null;
  public $action = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'question_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'paper_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'is_delete',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'question_origin',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'category_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'course_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['question_id'])) {
        $this->question_id = $vals['question_id'];
      }
      if (isset($vals['paper_id'])) {
        $this->paper_id = $vals['paper_id'];
      }
      if (isset($vals['is_delete'])) {
        $this->is_delete = $vals['is_delete'];
      }
      if (isset($vals['question_origin'])) {
        $this->question_origin = $vals['question_origin'];
      }
      if (isset($vals['category_id'])) {
        $this->category_id = $vals['category_id'];
      }
      if (isset($vals['course_id'])) {
        $this->course_id = $vals['course_id'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
    }
  }

  public function getName() {
    return 'PageQuestion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->question_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->paper_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_delete);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->question_origin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->category_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->course_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PageQuestion');
    if ($this->question_id !== null) {
      $xfer += $output->writeFieldBegin('question_id', TType::I32, 1);
      $xfer += $output->writeI32($this->question_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->paper_id !== null) {
      $xfer += $output->writeFieldBegin('paper_id', TType::I32, 2);
      $xfer += $output->writeI32($this->paper_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_delete !== null) {
      $xfer += $output->writeFieldBegin('is_delete', TType::I32, 3);
      $xfer += $output->writeI32($this->is_delete);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->question_origin !== null) {
      $xfer += $output->writeFieldBegin('question_origin', TType::I32, 4);
      $xfer += $output->writeI32($this->question_origin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->category_id !== null) {
      $xfer += $output->writeFieldBegin('category_id', TType::I32, 5);
      $xfer += $output->writeI32($this->category_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->course_id !== null) {
      $xfer += $output->writeFieldBegin('course_id', TType::I32, 6);
      $xfer += $output->writeI32($this->course_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 7);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


