"use strict";function OutputStream(options){function to_ascii(str,identifier){return str.replace(/[\u0080-\uffff]/g,function(ch){var code=ch.charCodeAt(0).toString(16);if(code.length<=2&&!identifier){for(;code.length<2;)code="0"+code;return"\\x"+code}for(;code.length<4;)code="0"+code;return"\\u"+code})}function make_string(str){var dq=0,sq=0;return str=str.replace(/[\\\b\f\n\r\t\x22\x27\u2028\u2029\0]/g,function(s){switch(s){case"\\":return"\\\\";case"\b":return"\\b";case"\f":return"\\f";case"\n":return"\\n";case"\r":return"\\r";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";case'"':return++dq,'"';case"'":return++sq,"'";case"\x00":return"\\0"}return s}),options.ascii_only&&(str=to_ascii(str)),dq>sq?"'"+str.replace(/\x27/g,"\\'")+"'":'"'+str.replace(/\x22/g,'\\"')+'"'}function encode_string(str){var ret=make_string(str);return options.inline_script&&(ret=ret.replace(/<\x2fscript([>\/\t\n\f\r ])/gi,"<\\/script$1")),ret}function make_name(name){return name=name.toString(),options.ascii_only&&(name=to_ascii(name,!0)),name}function make_indent(back){return repeat_string(" ",options.indent_start+indentation-back*options.indent_level)}function last_char(){return last.charAt(last.length-1)}function maybe_newline(){options.max_line_len&&current_col>options.max_line_len&&print("\n")}function print(str){str=String(str);var ch=str.charAt(0);if(might_need_semicolon&&(ch&&!(";}".indexOf(ch)<0)||/[;]$/.test(last)||(options.semicolons||requireSemicolonChars(ch)?(OUTPUT+=";",current_col++,current_pos++):(OUTPUT+="\n",current_pos++,current_line++,current_col=0),options.beautify||(might_need_space=!1)),might_need_semicolon=!1,maybe_newline()),!options.beautify&&options.preserve_line&&stack[stack.length-1])for(var target_line=stack[stack.length-1].start.line;target_line>current_line;)OUTPUT+="\n",current_pos++,current_line++,current_col=0,might_need_space=!1;if(might_need_space){var prev=last_char();(is_identifier_char(prev)&&(is_identifier_char(ch)||"\\"==ch)||/^[\+\-\/]$/.test(ch)&&ch==prev)&&(OUTPUT+=" ",current_col++,current_pos++),might_need_space=!1}var a=str.split(/\r?\n/),n=a.length-1;current_line+=n,0==n?current_col+=a[n].length:current_col=a[n].length,current_pos+=str.length,last=str,OUTPUT+=str}function force_semicolon(){might_need_semicolon=!1,print(";")}function next_indent(){return indentation+options.indent_level}function with_block(cont){var ret;return print("{"),newline(),with_indent(next_indent(),function(){ret=cont()}),indent(),print("}"),ret}function with_parens(cont){print("(");var ret=cont();return print(")"),ret}function with_square(cont){print("[");var ret=cont();return print("]"),ret}function comma(){print(","),space()}function colon(){print(":"),options.space_colon&&space()}function get(){return OUTPUT}options=defaults(options,{indent_start:0,indent_level:4,quote_keys:!1,space_colon:!0,ascii_only:!1,inline_script:!1,width:80,max_line_len:32e3,ie_proof:!0,beautify:!1,source_map:null,bracketize:!1,semicolons:!0,comments:!1,preserve_line:!1,negate_iife:!(options&&options.beautify)},!0);var indentation=0,current_col=0,current_line=1,current_pos=0,OUTPUT="",might_need_space=!1,might_need_semicolon=!1,last=null,requireSemicolonChars=makePredicate("( [ + * / - , ."),space=options.beautify?function(){print(" ")}:function(){might_need_space=!0},indent=options.beautify?function(half){options.beautify&&print(make_indent(half?.5:0))}:noop,with_indent=options.beautify?function(col,cont){col===!0&&(col=next_indent());var save_indentation=indentation;indentation=col;var ret=cont();return indentation=save_indentation,ret}:function(col,cont){return cont()},newline=options.beautify?function(){print("\n")}:noop,semicolon=options.beautify?function(){print(";")}:function(){might_need_semicolon=!0},add_mapping=options.source_map?function(token,name){try{token&&options.source_map.add(token.file||"?",current_line,current_col,token.line,token.col,name||"name"!=token.type?name:token.value)}catch(ex){AST_Node.warn("Couldn't figure out mapping for {file}:{line},{col} â†’ {cline},{ccol} [{name}]",{file:token.file,line:token.line,col:token.col,cline:current_line,ccol:current_col,name:name||""})}}:noop,stack=[];return{get:get,toString:get,indent:indent,indentation:function(){return indentation},current_width:function(){return current_col-indentation},should_break:function(){return options.width&&this.current_width()>=options.width},newline:newline,print:print,space:space,comma:comma,colon:colon,last:function(){return last},semicolon:semicolon,force_semicolon:force_semicolon,to_ascii:to_ascii,print_name:function(name){print(make_name(name))},print_string:function(str){print(encode_string(str))},next_indent:next_indent,with_indent:with_indent,with_block:with_block,with_parens:with_parens,with_square:with_square,add_mapping:add_mapping,option:function(opt){return options[opt]},line:function(){return current_line},col:function(){return current_col},pos:function(){return current_pos},push_node:function(node){stack.push(node)},pop_node:function(){return stack.pop()},stack:function(){return stack},parent:function(n){return stack[stack.length-2-(n||0)]}}}!function(){function DEFPRINT(nodetype,generator){nodetype.DEFMETHOD("_codegen",generator)}function PARENS(nodetype,func){nodetype.DEFMETHOD("needs_parens",func)}function assign_and_conditional_paren_rules(output){var p=output.parent();return p instanceof AST_Unary?!0:p instanceof AST_Binary&&!(p instanceof AST_Assign)?!0:p instanceof AST_Call&&p.expression===this?!0:p instanceof AST_Conditional&&p.condition===this?!0:p instanceof AST_PropAccess&&p.expression===this?!0:void 0}function display_body(body,is_toplevel,output){var last=body.length-1;body.forEach(function(stmt,i){stmt instanceof AST_EmptyStatement||(output.indent(),stmt.print(output),i==last&&is_toplevel||(output.newline(),is_toplevel&&output.newline()))})}function print_bracketed(body,output){body.length>0?output.with_block(function(){display_body(body,!1,output)}):output.print("{}")}function make_then(self,output){if(output.option("bracketize"))return make_block(self.body,output),void 0;if(!self.body)return output.force_semicolon();if(self.body instanceof AST_Do&&output.option("ie_proof"))return make_block(self.body,output),void 0;for(var b=self.body;;)if(b instanceof AST_If){if(!b.alternative)return make_block(self.body,output),void 0;b=b.alternative}else{if(!(b instanceof AST_StatementWithBody))break;b=b.body}force_statement(self.body,output)}function parenthesize_for_noin(node,output,noin){if(noin)try{node.walk(new TreeWalker(function(node){if(node instanceof AST_Binary&&"in"==node.operator)throw output})),node.print(output)}catch(ex){if(ex!==output)throw ex;node.print(output,!0)}else node.print(output)}function force_statement(stat,output){output.option("bracketize")?!stat||stat instanceof AST_EmptyStatement?output.print("{}"):stat instanceof AST_BlockStatement?stat.print(output):output.with_block(function(){output.indent(),stat.print(output),output.newline()}):!stat||stat instanceof AST_EmptyStatement?output.force_semicolon():stat.print(output)}function first_in_statement(output){for(var a=output.stack(),i=a.length,node=a[--i],p=a[--i];i>0;){if(p instanceof AST_Statement&&p.body===node)return!0;if(!(p instanceof AST_Seq&&p.car===node||p instanceof AST_Call&&p.expression===node&&!(p instanceof AST_New)||p instanceof AST_Dot&&p.expression===node||p instanceof AST_Sub&&p.expression===node||p instanceof AST_Conditional&&p.condition===node||p instanceof AST_Binary&&p.left===node||p instanceof AST_UnaryPostfix&&p.expression===node))return!1;node=p,p=a[--i]}}function no_constructor_parens(self,output){return 0==self.args.length&&!output.option("beautify")}function best_of(a){for(var best=a[0],len=best.length,i=1;i<a.length;++i)a[i].length<len&&(best=a[i],len=best.length);return best}function make_num(num){var m,str=num.toString(10),a=[str.replace(/^0\./,".").replace("e+","e")];return Math.floor(num)===num?(num>=0?a.push("0x"+num.toString(16).toLowerCase(),"0"+num.toString(8)):a.push("-0x"+(-num).toString(16).toLowerCase(),"-0"+(-num).toString(8)),(m=/^(.*?)(0+)$/.exec(num))&&a.push(m[1]+"e"+m[2].length)):(m=/^0?\.(0+)(.*)$/.exec(num))&&a.push(m[2]+"e-"+(m[1].length+m[2].length),str.substr(str.indexOf("."))),best_of(a)}function make_block(stmt,output){return stmt instanceof AST_BlockStatement?(stmt.print(output),void 0):(output.with_block(function(){output.indent(),stmt.print(output),output.newline()}),void 0)}function DEFMAP(nodetype,generator){nodetype.DEFMETHOD("add_source_map",function(stream){generator(this,stream)})}function basic_sourcemap_gen(self,output){output.add_mapping(self.start)}AST_Node.DEFMETHOD("print",function(stream,force_parens){var self=this,generator=self._codegen;stream.push_node(self);var needs_parens=self.needs_parens(stream),fc=self instanceof AST_Function&&stream.option("negate_iife");force_parens||needs_parens&&!fc?stream.with_parens(function(){self.add_comments(stream),self.add_source_map(stream),generator(self,stream)}):(self.add_comments(stream),needs_parens&&fc&&stream.print("!"),self.add_source_map(stream),generator(self,stream)),stream.pop_node()}),AST_Node.DEFMETHOD("print_to_string",function(options){var s=OutputStream(options);return this.print(s),s.get()}),AST_Node.DEFMETHOD("add_comments",function(output){var c=output.option("comments"),self=this;if(c){var start=self.start;if(start&&!start._comments_dumped){start._comments_dumped=!0;var comments=start.comments_before;self instanceof AST_Exit&&self.value&&self.value.start.comments_before.length>0&&(comments=(comments||[]).concat(self.value.start.comments_before),self.value.start.comments_before=[]),c.test?comments=comments.filter(function(comment){return c.test(comment.value)}):"function"==typeof c&&(comments=comments.filter(function(comment){return c(self,comment)})),comments.forEach(function(c){"comment1"==c.type?(output.print("//"+c.value+"\n"),output.indent()):"comment2"==c.type&&(output.print("/*"+c.value+"*/"),start.nlb?(output.print("\n"),output.indent()):output.space())})}}}),PARENS(AST_Node,function(){return!1}),PARENS(AST_Function,function(output){return first_in_statement(output)}),PARENS(AST_Object,function(output){return first_in_statement(output)}),PARENS(AST_Unary,function(output){var p=output.parent();return p instanceof AST_PropAccess&&p.expression===this}),PARENS(AST_Seq,function(output){var p=output.parent();return p instanceof AST_Call||p instanceof AST_Unary||p instanceof AST_Binary||p instanceof AST_VarDef||p instanceof AST_Dot||p instanceof AST_Array||p instanceof AST_ObjectProperty||p instanceof AST_Conditional}),PARENS(AST_Binary,function(output){var p=output.parent();if(p instanceof AST_Call&&p.expression===this)return!0;if(p instanceof AST_Unary)return!0;if(p instanceof AST_PropAccess&&p.expression===this)return!0;if(p instanceof AST_Binary){var po=p.operator,pp=PRECEDENCE[po],so=this.operator,sp=PRECEDENCE[so];if(pp>sp||pp==sp&&this===p.right&&(so!=po||"*"!=so&&"&&"!=so&&"||"!=so))return!0}}),PARENS(AST_PropAccess,function(output){var p=output.parent();if(p instanceof AST_New&&p.expression===this)try{this.walk(new TreeWalker(function(node){if(node instanceof AST_Call)throw p}))}catch(ex){if(ex!==p)throw ex;return!0}}),PARENS(AST_Call,function(output){var p=output.parent();return p instanceof AST_New&&p.expression===this}),PARENS(AST_New,function(output){var p=output.parent();return no_constructor_parens(this,output)&&(p instanceof AST_PropAccess||p instanceof AST_Call&&p.expression===this)?!0:void 0}),PARENS(AST_Number,function(output){var p=output.parent();return this.getValue()<0&&p instanceof AST_PropAccess&&p.expression===this?!0:void 0}),PARENS(AST_NaN,function(output){var p=output.parent();return p instanceof AST_PropAccess&&p.expression===this?!0:void 0}),PARENS(AST_Assign,assign_and_conditional_paren_rules),PARENS(AST_Conditional,assign_and_conditional_paren_rules),DEFPRINT(AST_Directive,function(self,output){output.print_string(self.value),output.semicolon()}),DEFPRINT(AST_Debugger,function(self,output){output.print("debugger"),output.semicolon()}),AST_StatementWithBody.DEFMETHOD("_do_print_body",function(output){force_statement(this.body,output)}),DEFPRINT(AST_Statement,function(self,output){self.body.print(output),output.semicolon()}),DEFPRINT(AST_Toplevel,function(self,output){display_body(self.body,!0,output),output.print("")}),DEFPRINT(AST_LabeledStatement,function(self,output){self.label.print(output),output.colon(),self.body.print(output)}),DEFPRINT(AST_SimpleStatement,function(self,output){self.body.print(output),output.semicolon()}),DEFPRINT(AST_BlockStatement,function(self,output){print_bracketed(self.body,output)}),DEFPRINT(AST_EmptyStatement,function(self,output){output.semicolon()}),DEFPRINT(AST_Do,function(self,output){output.print("do"),output.space(),self._do_print_body(output),output.space(),output.print("while"),output.space(),output.with_parens(function(){self.condition.print(output)}),output.semicolon()}),DEFPRINT(AST_While,function(self,output){output.print("while"),output.space(),output.with_parens(function(){self.condition.print(output)}),output.space(),self._do_print_body(output)}),DEFPRINT(AST_For,function(self,output){output.print("for"),output.space(),output.with_parens(function(){self.init?(self.init instanceof AST_Definitions?self.init.print(output):parenthesize_for_noin(self.init,output,!0),output.print(";"),output.space()):output.print(";"),self.condition?(self.condition.print(output),output.print(";"),output.space()):output.print(";"),self.step&&self.step.print(output)}),output.space(),self._do_print_body(output)}),DEFPRINT(AST_ForIn,function(self,output){output.print("for"),output.space(),output.with_parens(function(){self.init.print(output),output.space(),output.print("in"),output.space(),self.object.print(output)}),output.space(),self._do_print_body(output)}),DEFPRINT(AST_With,function(self,output){output.print("with"),output.space(),output.with_parens(function(){self.expression.print(output)}),output.space(),self._do_print_body(output)}),AST_Lambda.DEFMETHOD("_do_print",function(output,nokeyword){var self=this;nokeyword||output.print("function"),self.name&&(output.space(),self.name.print(output)),output.with_parens(function(){self.argnames.forEach(function(arg,i){i&&output.comma(),arg.print(output)})}),output.space(),print_bracketed(self.body,output)}),DEFPRINT(AST_Lambda,function(self,output){self._do_print(output)}),AST_Exit.DEFMETHOD("_do_print",function(output,kind){output.print(kind),this.value&&(output.space(),this.value.print(output)),output.semicolon()}),DEFPRINT(AST_Return,function(self,output){self._do_print(output,"return")}),DEFPRINT(AST_Throw,function(self,output){self._do_print(output,"throw")}),AST_LoopControl.DEFMETHOD("_do_print",function(output,kind){output.print(kind),this.label&&(output.space(),this.label.print(output)),output.semicolon()}),DEFPRINT(AST_Break,function(self,output){self._do_print(output,"break")}),DEFPRINT(AST_Continue,function(self,output){self._do_print(output,"continue")}),DEFPRINT(AST_If,function(self,output){output.print("if"),output.space(),output.with_parens(function(){self.condition.print(output)}),output.space(),self.alternative?(make_then(self,output),output.space(),output.print("else"),output.space(),force_statement(self.alternative,output)):self._do_print_body(output)}),DEFPRINT(AST_Switch,function(self,output){output.print("switch"),output.space(),output.with_parens(function(){self.expression.print(output)}),output.space(),self.body.length>0?output.with_block(function(){self.body.forEach(function(stmt,i){i&&output.newline(),output.indent(!0),stmt.print(output)})}):output.print("{}")}),AST_SwitchBranch.DEFMETHOD("_do_print_body",function(output){this.body.length>0&&(output.newline(),this.body.forEach(function(stmt){output.indent(),stmt.print(output),output.newline()}))}),DEFPRINT(AST_Default,function(self,output){output.print("default:"),self._do_print_body(output)}),DEFPRINT(AST_Case,function(self,output){output.print("case"),output.space(),self.expression.print(output),output.print(":"),self._do_print_body(output)}),DEFPRINT(AST_Try,function(self,output){output.print("try"),output.space(),print_bracketed(self.body,output),self.bcatch&&(output.space(),self.bcatch.print(output)),self.bfinally&&(output.space(),self.bfinally.print(output))}),DEFPRINT(AST_Catch,function(self,output){output.print("catch"),output.space(),output.with_parens(function(){self.argname.print(output)}),output.space(),print_bracketed(self.body,output)}),DEFPRINT(AST_Finally,function(self,output){output.print("finally"),output.space(),print_bracketed(self.body,output)}),AST_Definitions.DEFMETHOD("_do_print",function(output,kind){output.print(kind),output.space(),this.definitions.forEach(function(def,i){i&&output.comma(),def.print(output)});var p=output.parent(),in_for=p instanceof AST_For||p instanceof AST_ForIn,avoid_semicolon=in_for&&p.init===this;avoid_semicolon||output.semicolon()}),DEFPRINT(AST_Var,function(self,output){self._do_print(output,"var")}),DEFPRINT(AST_Const,function(self,output){self._do_print(output,"const")}),DEFPRINT(AST_VarDef,function(self,output){if(self.name.print(output),self.value){output.space(),output.print("="),output.space();var p=output.parent(1),noin=p instanceof AST_For||p instanceof AST_ForIn;parenthesize_for_noin(self.value,output,noin)}}),DEFPRINT(AST_Call,function(self,output){self.expression.print(output),self instanceof AST_New&&no_constructor_parens(self,output)||output.with_parens(function(){self.args.forEach(function(expr,i){i&&output.comma(),expr.print(output)})})}),DEFPRINT(AST_New,function(self,output){output.print("new"),output.space(),AST_Call.prototype._codegen(self,output)}),AST_Seq.DEFMETHOD("_do_print",function(output){this.car.print(output),this.cdr&&(output.comma(),output.should_break()&&(output.newline(),output.indent()),this.cdr.print(output))}),DEFPRINT(AST_Seq,function(self,output){self._do_print(output)}),DEFPRINT(AST_Dot,function(self,output){var expr=self.expression;expr.print(output),expr instanceof AST_Number&&expr.getValue()>=0&&(/[xa-f.]/i.test(output.last())||output.print(".")),output.print("."),output.add_mapping(self.end),output.print_name(self.property)}),DEFPRINT(AST_Sub,function(self,output){self.expression.print(output),output.print("["),self.property.print(output),output.print("]")}),DEFPRINT(AST_UnaryPrefix,function(self,output){var op=self.operator;output.print(op),/^[a-z]/i.test(op)&&output.space(),self.expression.print(output)}),DEFPRINT(AST_UnaryPostfix,function(self,output){self.expression.print(output),output.print(self.operator)}),DEFPRINT(AST_Binary,function(self,output){self.left.print(output),output.space(),output.print(self.operator),output.space(),self.right.print(output)}),DEFPRINT(AST_Conditional,function(self,output){self.condition.print(output),output.space(),output.print("?"),output.space(),self.consequent.print(output),output.space(),output.colon(),self.alternative.print(output)}),DEFPRINT(AST_Array,function(self,output){output.with_square(function(){var a=self.elements,len=a.length;len>0&&output.space(),a.forEach(function(exp,i){i&&output.comma(),exp.print(output)}),len>0&&output.space()})}),DEFPRINT(AST_Object,function(self,output){self.properties.length>0?output.with_block(function(){self.properties.forEach(function(prop,i){i&&(output.print(","),output.newline()),output.indent(),prop.print(output)}),output.newline()}):output.print("{}")}),DEFPRINT(AST_ObjectKeyVal,function(self,output){var key=self.key;output.option("quote_keys")?output.print_string(key+""):("number"==typeof key||!output.option("beautify")&&+key+""==key)&&parseFloat(key)>=0?output.print(make_num(key)):is_identifier(key)?output.print_name(key):output.print_string(key),output.colon(),self.value.print(output)}),DEFPRINT(AST_ObjectSetter,function(self,output){output.print("set"),self.value._do_print(output,!0)}),DEFPRINT(AST_ObjectGetter,function(self,output){output.print("get"),self.value._do_print(output,!0)}),DEFPRINT(AST_Symbol,function(self,output){var def=self.definition();output.print_name(def?def.mangled_name||def.name:self.name)}),DEFPRINT(AST_Undefined,function(self,output){output.print("void 0")}),DEFPRINT(AST_Hole,noop),DEFPRINT(AST_Infinity,function(self,output){output.print("1/0")}),DEFPRINT(AST_NaN,function(self,output){output.print("0/0")}),DEFPRINT(AST_This,function(self,output){output.print("this")}),DEFPRINT(AST_Constant,function(self,output){output.print(self.getValue())}),DEFPRINT(AST_String,function(self,output){output.print_string(self.getValue())}),DEFPRINT(AST_Number,function(self,output){output.print(make_num(self.getValue()))}),DEFPRINT(AST_RegExp,function(self,output){var str=self.getValue().toString();output.option("ascii_only")&&(str=output.to_ascii(str)),output.print(str);var p=output.parent();p instanceof AST_Binary&&/^in/.test(p.operator)&&p.left===self&&output.print(" ")}),DEFMAP(AST_Node,noop),DEFMAP(AST_Directive,basic_sourcemap_gen),DEFMAP(AST_Debugger,basic_sourcemap_gen),DEFMAP(AST_Symbol,basic_sourcemap_gen),DEFMAP(AST_Jump,basic_sourcemap_gen),DEFMAP(AST_StatementWithBody,basic_sourcemap_gen),DEFMAP(AST_LabeledStatement,noop),DEFMAP(AST_Lambda,basic_sourcemap_gen),DEFMAP(AST_Switch,basic_sourcemap_gen),DEFMAP(AST_SwitchBranch,basic_sourcemap_gen),DEFMAP(AST_BlockStatement,basic_sourcemap_gen),DEFMAP(AST_Toplevel,noop),DEFMAP(AST_New,basic_sourcemap_gen),DEFMAP(AST_Try,basic_sourcemap_gen),DEFMAP(AST_Catch,basic_sourcemap_gen),DEFMAP(AST_Finally,basic_sourcemap_gen),DEFMAP(AST_Definitions,basic_sourcemap_gen),DEFMAP(AST_Constant,basic_sourcemap_gen),DEFMAP(AST_ObjectProperty,function(self,output){output.add_mapping(self.start,self.key)})}();