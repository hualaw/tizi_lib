"use strict";function Compressor(options,false_by_default){return this instanceof Compressor?(TreeTransformer.call(this,this.before,this.after),this.options=defaults(options,{sequences:!false_by_default,properties:!false_by_default,dead_code:!false_by_default,drop_debugger:!false_by_default,unsafe:!1,unsafe_comps:!1,conditionals:!false_by_default,comparisons:!false_by_default,evaluate:!false_by_default,booleans:!false_by_default,loops:!false_by_default,unused:!false_by_default,hoist_funs:!false_by_default,hoist_vars:!1,if_return:!false_by_default,join_vars:!false_by_default,cascade:!false_by_default,side_effects:!false_by_default,screw_ie8:!1,warnings:!0,global_defs:{}},!0),void 0):new Compressor(options,false_by_default)}Compressor.prototype=new TreeTransformer,merge(Compressor.prototype,{option:function(key){return this.options[key]},warn:function(){this.options.warnings&&AST_Node.warn.apply(AST_Node,arguments)},before:function(node,descend){if(node._squeezed)return node;if(node instanceof AST_Scope&&(node.drop_unused(this),node=node.hoist_declarations(this)),descend(node,this),node=node.optimize(this),node instanceof AST_Scope){var save_warnings=this.options.warnings;this.options.warnings=!1,node.drop_unused(this),this.options.warnings=save_warnings}return node._squeezed=!0,node}}),function(){function OPT(node,optimizer){node.DEFMETHOD("optimize",function(compressor){var self=this;if(self._optimized)return self;var opt=optimizer(self,compressor);return opt._optimized=!0,opt===self?opt:opt.transform(compressor)})}function make_node(ctor,orig,props){return props||(props={}),orig&&(props.start||(props.start=orig.start),props.end||(props.end=orig.end)),new ctor(props)}function make_node_from_constant(compressor,val,orig){if(val instanceof AST_Node)return val.transform(compressor);switch(typeof val){case"string":return make_node(AST_String,orig,{value:val}).optimize(compressor);case"number":return make_node(isNaN(val)?AST_NaN:AST_Number,orig,{value:val}).optimize(compressor);case"boolean":return make_node(val?AST_True:AST_False,orig).optimize(compressor);case"undefined":return make_node(AST_Undefined,orig).optimize(compressor);default:if(null===val)return make_node(AST_Null,orig).optimize(compressor);if(val instanceof RegExp)return make_node(AST_RegExp,orig).optimize(compressor);throw new Error(string_template("Can't handle constant of type: {type}",{type:typeof val}))}}function as_statement_array(thing){if(null===thing)return[];if(thing instanceof AST_BlockStatement)return thing.body;if(thing instanceof AST_EmptyStatement)return[];if(thing instanceof AST_Statement)return[thing];throw new Error("Can't convert thing to statement array")}function is_empty(thing){return null===thing?!0:thing instanceof AST_EmptyStatement?!0:thing instanceof AST_BlockStatement?0==thing.body.length:!1}function loop_body(x){return x instanceof AST_Switch?x:x instanceof AST_For||x instanceof AST_ForIn||x instanceof AST_DWLoop?x.body instanceof AST_BlockStatement?x.body:x:x}function tighten_body(statements,compressor){function eliminate_spurious_blocks(statements){var seen_dirs=[];return statements.reduce(function(a,stat){return stat instanceof AST_BlockStatement?(CHANGED=!0,a.push.apply(a,eliminate_spurious_blocks(stat.body))):stat instanceof AST_EmptyStatement?CHANGED=!0:stat instanceof AST_Directive?seen_dirs.indexOf(stat.value)<0?(a.push(stat),seen_dirs.push(stat.value)):CHANGED=!0:a.push(stat),a},[])}function handle_if_return(statements,compressor){var self=compressor.self(),in_lambda=self instanceof AST_Lambda,ret=[];loop:for(var i=statements.length;--i>=0;){var stat=statements[i];switch(!0){case in_lambda&&stat instanceof AST_Return&&!stat.value&&0==ret.length:CHANGED=!0;continue loop;case stat instanceof AST_If:if(stat.body instanceof AST_Return){if((in_lambda&&0==ret.length||ret[0]instanceof AST_Return&&!ret[0].value)&&!stat.body.value&&!stat.alternative){CHANGED=!0;var cond=make_node(AST_SimpleStatement,stat.condition,{body:stat.condition});ret.unshift(cond);continue loop}if(ret[0]instanceof AST_Return&&stat.body.value&&ret[0].value&&!stat.alternative){CHANGED=!0,stat=stat.clone(),stat.alternative=ret[0],ret[0]=stat.transform(compressor);continue loop}if((0==ret.length||ret[0]instanceof AST_Return)&&stat.body.value&&!stat.alternative&&in_lambda){CHANGED=!0,stat=stat.clone(),stat.alternative=ret[0]||make_node(AST_Return,stat,{value:make_node(AST_Undefined,stat)}),ret[0]=stat.transform(compressor);continue loop}if(!stat.body.value&&in_lambda){CHANGED=!0,stat=stat.clone(),stat.condition=stat.condition.negate(compressor),stat.body=make_node(AST_BlockStatement,stat,{body:as_statement_array(stat.alternative).concat(ret)}),stat.alternative=null,ret=[stat.transform(compressor)];continue loop}if(1==ret.length&&in_lambda&&ret[0]instanceof AST_SimpleStatement&&(!stat.alternative||stat.alternative instanceof AST_SimpleStatement)){CHANGED=!0,ret.push(make_node(AST_Return,ret[0],{value:make_node(AST_Undefined,ret[0])}).transform(compressor)),ret=as_statement_array(stat.alternative).concat(ret),ret.unshift(stat);continue loop}}var ab=aborts(stat.body),lct=ab instanceof AST_LoopControl?compressor.loopcontrol_target(ab.label):null;if(ab&&(ab instanceof AST_Return&&!ab.value&&in_lambda||ab instanceof AST_Continue&&self===loop_body(lct)||ab instanceof AST_Break&&lct instanceof AST_BlockStatement&&self===lct)){ab.label&&remove(ab.label.thedef.references,ab.label),CHANGED=!0;var body=as_statement_array(stat.body).slice(0,-1);stat=stat.clone(),stat.condition=stat.condition.negate(compressor),stat.body=make_node(AST_BlockStatement,stat,{body:ret}),stat.alternative=make_node(AST_BlockStatement,stat,{body:body}),ret=[stat.transform(compressor)];continue loop}var ab=aborts(stat.alternative),lct=ab instanceof AST_LoopControl?compressor.loopcontrol_target(ab.label):null;if(ab&&(ab instanceof AST_Return&&!ab.value&&in_lambda||ab instanceof AST_Continue&&self===loop_body(lct)||ab instanceof AST_Break&&lct instanceof AST_BlockStatement&&self===lct)){ab.label&&remove(ab.label.thedef.references,ab.label),CHANGED=!0,stat=stat.clone(),stat.body=make_node(AST_BlockStatement,stat.body,{body:as_statement_array(stat.body).concat(ret)}),stat.alternative=make_node(AST_BlockStatement,stat.alternative,{body:as_statement_array(stat.alternative).slice(0,-1)}),ret=[stat.transform(compressor)];continue loop}ret.unshift(stat);break;default:ret.unshift(stat)}}return ret}function eliminate_dead_code(statements,compressor){var has_quit=!1,orig=statements.length,self=compressor.self();return statements=statements.reduce(function(a,stat){if(has_quit)extract_declarations_from_unreachable_code(compressor,stat,a);else{if(stat instanceof AST_LoopControl){var lct=compressor.loopcontrol_target(stat.label);stat instanceof AST_Break&&lct instanceof AST_BlockStatement&&loop_body(lct)===self||stat instanceof AST_Continue&&loop_body(lct)===self?stat.label&&remove(stat.label.thedef.references,stat.label):a.push(stat)}else a.push(stat);aborts(stat)&&(has_quit=!0)}return a},[]),CHANGED=statements.length!=orig,statements}function sequencesize(statements,compressor){function push_seq(){seq=AST_Seq.from_array(seq),seq&&ret.push(make_node(AST_SimpleStatement,seq,{body:seq})),seq=[]}if(statements.length<2)return statements;var seq=[],ret=[];return statements.forEach(function(stat){stat instanceof AST_SimpleStatement?seq.push(stat.body):(push_seq(),ret.push(stat))}),push_seq(),ret=sequencesize_2(ret,compressor),CHANGED=ret.length!=statements.length,ret}function sequencesize_2(statements,compressor){function cons_seq(right){ret.pop();var left=prev.body;return left instanceof AST_Seq?left.add(right):left=AST_Seq.cons(left,right),left.transform(compressor)}var ret=[],prev=null;return statements.forEach(function(stat){if(prev)if(stat instanceof AST_For){var opera={};try{prev.body.walk(new TreeWalker(function(node){if(node instanceof AST_Binary&&"in"==node.operator)throw opera})),!stat.init||stat.init instanceof AST_Definitions?stat.init||(stat.init=prev.body,ret.pop()):stat.init=cons_seq(stat.init)}catch(ex){if(ex!==opera)throw ex}}else stat instanceof AST_If?stat.condition=cons_seq(stat.condition):stat instanceof AST_With?stat.expression=cons_seq(stat.expression):stat instanceof AST_Exit&&stat.value?stat.value=cons_seq(stat.value):stat instanceof AST_Exit?stat.value=cons_seq(make_node(AST_Undefined,stat)):stat instanceof AST_Switch&&(stat.expression=cons_seq(stat.expression));ret.push(stat),prev=stat instanceof AST_SimpleStatement?stat:null}),ret}function join_consecutive_vars(statements){var prev=null;return statements.reduce(function(a,stat){return stat instanceof AST_Definitions&&prev&&prev.TYPE==stat.TYPE?(prev.definitions=prev.definitions.concat(stat.definitions),CHANGED=!0):stat instanceof AST_For&&prev instanceof AST_Definitions&&(!stat.init||stat.init.TYPE==prev.TYPE)?(CHANGED=!0,a.pop(),stat.init?stat.init.definitions=prev.definitions.concat(stat.init.definitions):stat.init=prev,a.push(stat),prev=stat):(prev=stat,a.push(stat)),a},[])}var CHANGED;do CHANGED=!1,statements=eliminate_spurious_blocks(statements),compressor.option("dead_code")&&(statements=eliminate_dead_code(statements,compressor)),compressor.option("if_return")&&(statements=handle_if_return(statements,compressor)),compressor.option("sequences")&&(statements=sequencesize(statements,compressor)),compressor.option("join_vars")&&(statements=join_consecutive_vars(statements,compressor));while(CHANGED);return statements}function extract_declarations_from_unreachable_code(compressor,stat,target){compressor.warn("Dropping unreachable code [{file}:{line},{col}]",stat.start),stat.walk(new TreeWalker(function(node){return node instanceof AST_Definitions?(compressor.warn("Declarations in unreachable code! [{file}:{line},{col}]",node.start),node.remove_initializers(),target.push(node),!0):node instanceof AST_Defun?(target.push(node),!0):node instanceof AST_Scope?!0:void 0}))}function best_of(ast1,ast2){return ast1.print_to_string().length>ast2.print_to_string().length?ast2:ast1}function aborts(thing){return thing&&thing.aborts()}function if_break_in_loop(self,compressor){function drop_it(rest){rest=as_statement_array(rest),self.body instanceof AST_BlockStatement?(self.body=self.body.clone(),self.body.body=rest.concat(self.body.body.slice(1)),self.body=self.body.transform(compressor)):self.body=make_node(AST_BlockStatement,self.body,{body:rest}).transform(compressor),if_break_in_loop(self,compressor)}var first=self.body instanceof AST_BlockStatement?self.body.body[0]:self.body;first instanceof AST_If&&(first.body instanceof AST_Break&&compressor.loopcontrol_target(first.body.label)===self?(self.condition=self.condition?make_node(AST_Binary,self.condition,{left:self.condition,operator:"&&",right:first.condition.negate(compressor)}):first.condition.negate(compressor),drop_it(first.alternative)):first.alternative instanceof AST_Break&&compressor.loopcontrol_target(first.alternative.label)===self&&(self.condition=self.condition?make_node(AST_Binary,self.condition,{left:self.condition,operator:"&&",right:first.condition}):first.condition,drop_it(first.body)))}function literals_in_boolean_context(self,compressor){return compressor.option("booleans")&&compressor.in_boolean_context()?make_node(AST_True,self):self}OPT(AST_Node,function(self){return self}),AST_Node.DEFMETHOD("equivalent_to",function(node){return this.print_to_string()==node.print_to_string()}),function(def){var unary_bool=["!","delete"],binary_bool=["in","instanceof","==","!=","===","!==","<","<=",">=",">"];def(AST_Node,function(){return!1}),def(AST_UnaryPrefix,function(){return member(this.operator,unary_bool)}),def(AST_Binary,function(){return member(this.operator,binary_bool)||("&&"==this.operator||"||"==this.operator)&&this.left.is_boolean()&&this.right.is_boolean()}),def(AST_Conditional,function(){return this.consequent.is_boolean()&&this.alternative.is_boolean()}),def(AST_Assign,function(){return"="==this.operator&&this.right.is_boolean()}),def(AST_Seq,function(){return this.cdr.is_boolean()}),def(AST_True,function(){return!0}),def(AST_False,function(){return!0})}(function(node,func){node.DEFMETHOD("is_boolean",func)}),function(def){def(AST_Node,function(){return!1}),def(AST_String,function(){return!0}),def(AST_UnaryPrefix,function(){return"typeof"==this.operator}),def(AST_Binary,function(compressor){return"+"==this.operator&&(this.left.is_string(compressor)||this.right.is_string(compressor))}),def(AST_Assign,function(compressor){return("="==this.operator||"+="==this.operator)&&this.right.is_string(compressor)}),def(AST_Seq,function(compressor){return this.cdr.is_string(compressor)}),def(AST_Conditional,function(compressor){return this.consequent.is_string(compressor)&&this.alternative.is_string(compressor)}),def(AST_Call,function(compressor){return compressor.option("unsafe")&&this.expression instanceof AST_SymbolRef&&"String"==this.expression.name&&this.expression.undeclared()})}(function(node,func){node.DEFMETHOD("is_string",func)}),function(def){function ev(node){return node._eval()}AST_Node.DEFMETHOD("evaluate",function(compressor){if(!compressor.option("evaluate"))return[this];try{var val=this._eval(),ast=make_node_from_constant(compressor,val,this);return[best_of(ast,this),val]}catch(ex){if(ex!==def)throw ex;return[this]}}),def(AST_Statement,function(){throw new Error(string_template("Cannot evaluate a statement [{file}:{line},{col}]",this.start))}),def(AST_Function,function(){return[this]}),def(AST_Node,function(){throw def}),def(AST_Constant,function(){return this.getValue()}),def(AST_UnaryPrefix,function(){var e=this.expression;switch(this.operator){case"!":return!ev(e);case"typeof":if(e instanceof AST_Function)return"function";if(e=ev(e),e instanceof RegExp)throw def;return typeof e;case"void":return void ev(e);case"~":return~ev(e);case"-":if(e=ev(e),0===e)throw def;return-e;case"+":return+ev(e)}throw def}),def(AST_Binary,function(){var left=this.left,right=this.right;switch(this.operator){case"&&":return ev(left)&&ev(right);case"||":return ev(left)||ev(right);case"|":return ev(left)|ev(right);case"&":return ev(left)&ev(right);case"^":return ev(left)^ev(right);case"+":return ev(left)+ev(right);case"*":return ev(left)*ev(right);case"/":return ev(left)/ev(right);case"%":return ev(left)%ev(right);case"-":return ev(left)-ev(right);case"<<":return ev(left)<<ev(right);case">>":return ev(left)>>ev(right);case">>>":return ev(left)>>>ev(right);case"==":return ev(left)==ev(right);case"===":return ev(left)===ev(right);case"!=":return ev(left)!=ev(right);case"!==":return ev(left)!==ev(right);case"<":return ev(left)<ev(right);case"<=":return ev(left)<=ev(right);case">":return ev(left)>ev(right);case">=":return ev(left)>=ev(right);case"in":return ev(left)in ev(right);case"instanceof":return ev(left)instanceof ev(right)}throw def}),def(AST_Conditional,function(){return ev(this.condition)?ev(this.consequent):ev(this.alternative)}),def(AST_SymbolRef,function(){var d=this.definition();if(d&&d.constant&&d.init)return ev(d.init);throw def})}(function(node,func){node.DEFMETHOD("_eval",func)}),function(def){function basic_negation(exp){return make_node(AST_UnaryPrefix,exp,{operator:"!",expression:exp})}def(AST_Node,function(){return basic_negation(this)}),def(AST_Statement,function(){throw new Error("Cannot negate a statement")}),def(AST_Function,function(){return basic_negation(this)}),def(AST_UnaryPrefix,function(){return"!"==this.operator?this.expression:basic_negation(this)}),def(AST_Seq,function(compressor){var self=this.clone();return self.cdr=self.cdr.negate(compressor),self}),def(AST_Conditional,function(compressor){var self=this.clone();return self.consequent=self.consequent.negate(compressor),self.alternative=self.alternative.negate(compressor),best_of(basic_negation(this),self)}),def(AST_Binary,function(compressor){var self=this.clone(),op=this.operator;if(compressor.option("unsafe_comps"))switch(op){case"<=":return self.operator=">",self;case"<":return self.operator=">=",self;case">=":return self.operator="<",self;case">":return self.operator="<=",self}switch(op){case"==":return self.operator="!=",self;case"!=":return self.operator="==",self;case"===":return self.operator="!==",self;case"!==":return self.operator="===",self;case"&&":return self.operator="||",self.left=self.left.negate(compressor),self.right=self.right.negate(compressor),best_of(basic_negation(this),self);case"||":return self.operator="&&",self.left=self.left.negate(compressor),self.right=self.right.negate(compressor),best_of(basic_negation(this),self)}return basic_negation(this)})}(function(node,func){node.DEFMETHOD("negate",function(compressor){return func.call(this,compressor)})}),function(def){def(AST_Node,function(){return!0}),def(AST_EmptyStatement,function(){return!1}),def(AST_Constant,function(){return!1}),def(AST_This,function(){return!1}),def(AST_Block,function(){for(var i=this.body.length;--i>=0;)if(this.body[i].has_side_effects())return!0;return!1}),def(AST_SimpleStatement,function(){return this.body.has_side_effects()}),def(AST_Defun,function(){return!0}),def(AST_Function,function(){return!1}),def(AST_Binary,function(){return this.left.has_side_effects()||this.right.has_side_effects()}),def(AST_Assign,function(){return!0}),def(AST_Conditional,function(){return this.condition.has_side_effects()||this.consequent.has_side_effects()||this.alternative.has_side_effects()}),def(AST_Unary,function(){return"delete"==this.operator||"++"==this.operator||"--"==this.operator||this.expression.has_side_effects()}),def(AST_SymbolRef,function(){return!1}),def(AST_Object,function(){for(var i=this.properties.length;--i>=0;)if(this.properties[i].has_side_effects())return!0;return!1}),def(AST_ObjectProperty,function(){return this.value.has_side_effects()}),def(AST_Array,function(){for(var i=this.elements.length;--i>=0;)if(this.elements[i].has_side_effects())return!0;return!1}),def(AST_PropAccess,function(){return!0}),def(AST_Seq,function(){return this.car.has_side_effects()||this.cdr.has_side_effects()})}(function(node,func){node.DEFMETHOD("has_side_effects",func)}),function(def){function block_aborts(){var n=this.body.length;return n>0&&aborts(this.body[n-1])}def(AST_Statement,function(){return null}),def(AST_Jump,function(){return this}),def(AST_BlockStatement,block_aborts),def(AST_SwitchBranch,block_aborts),def(AST_If,function(){return this.alternative&&aborts(this.body)&&aborts(this.alternative)})}(function(node,func){node.DEFMETHOD("aborts",func)}),OPT(AST_Directive,function(self){return self.scope.has_directive(self.value)!==self.scope?make_node(AST_EmptyStatement,self):self}),OPT(AST_Debugger,function(self,compressor){return compressor.option("drop_debugger")?make_node(AST_EmptyStatement,self):self}),OPT(AST_LabeledStatement,function(self,compressor){return self.body instanceof AST_Break&&compressor.loopcontrol_target(self.body.label)===self.body?make_node(AST_EmptyStatement,self):0==self.label.references.length?self.body:self}),OPT(AST_Block,function(self,compressor){return self.body=tighten_body(self.body,compressor),self}),OPT(AST_BlockStatement,function(self,compressor){switch(self.body=tighten_body(self.body,compressor),self.body.length){case 1:return self.body[0];case 0:return make_node(AST_EmptyStatement,self)}return self}),AST_Scope.DEFMETHOD("drop_unused",function(compressor){var self=this;if(compressor.option("unused")&&!(self instanceof AST_Toplevel)&&!self.uses_eval){var in_use=[],initializations=new Dictionary,scope=this,tw=new TreeWalker(function(node,descend){if(node!==self){if(node instanceof AST_Defun)return initializations.add(node.name.name,node),!0;if(node instanceof AST_Definitions&&scope===self)return node.definitions.forEach(function(def){def.value&&(initializations.add(def.name.name,def.value),def.value.has_side_effects()&&def.value.walk(tw))}),!0;if(node instanceof AST_SymbolRef)return push_uniq(in_use,node.definition()),!0;if(node instanceof AST_Scope){var save_scope=scope;return scope=node,descend(),scope=save_scope,!0}}});self.walk(tw);for(var i=0;i<in_use.length;++i)in_use[i].orig.forEach(function(decl){var init=initializations.get(decl.name);init&&init.forEach(function(init){var tw=new TreeWalker(function(node){node instanceof AST_SymbolRef&&push_uniq(in_use,node.definition())});init.walk(tw)})});var tt=new TreeTransformer(function(node,descend,in_list){if(node instanceof AST_Lambda)for(var a=node.argnames,i=a.length;--i>=0;){var sym=a[i];if(!sym.unreferenced())break;a.pop(),compressor.warn("Dropping unused function argument {name} [{file}:{line},{col}]",{name:sym.name,file:sym.start.file,line:sym.start.line,col:sym.start.col})}if(node instanceof AST_Defun&&node!==self)return member(node.name.definition(),in_use)?node:(compressor.warn("Dropping unused function {name} [{file}:{line},{col}]",{name:node.name.name,file:node.name.start.file,line:node.name.start.line,col:node.name.start.col}),make_node(AST_EmptyStatement,node));if(node instanceof AST_Definitions&&!(tt.parent()instanceof AST_ForIn)){var def=node.definitions.filter(function(def){if(member(def.name.definition(),in_use))return!0;var w={name:def.name.name,file:def.name.start.file,line:def.name.start.line,col:def.name.start.col};return def.value&&def.value.has_side_effects()?(def._unused_side_effects=!0,compressor.warn("Side effects in initialization of unused variable {name} [{file}:{line},{col}]",w),!0):(compressor.warn("Dropping unused variable {name} [{file}:{line},{col}]",w),!1)});def=mergeSort(def,function(a,b){return!a.value&&b.value?-1:!b.value&&a.value?1:0});for(var side_effects=[],i=0;i<def.length;){var x=def[i];x._unused_side_effects?(side_effects.push(x.value),def.splice(i,1)):(side_effects.length>0&&(side_effects.push(x.value),x.value=AST_Seq.from_array(side_effects),side_effects=[]),++i)}return side_effects=side_effects.length>0?make_node(AST_BlockStatement,node,{body:[make_node(AST_SimpleStatement,node,{body:AST_Seq.from_array(side_effects)})]}):null,0!=def.length||side_effects?0==def.length?side_effects:(node.definitions=def,side_effects&&(side_effects.body.unshift(node),node=side_effects),node):make_node(AST_EmptyStatement,node)}if(node instanceof AST_For&&node.init instanceof AST_BlockStatement){descend(node,this);var body=node.init.body.slice(0,-1);return node.init=node.init.body.slice(-1)[0].body,body.push(node),in_list?MAP.splice(body):make_node(AST_BlockStatement,node,{body:body})}return node instanceof AST_Scope&&node!==self?node:void 0});self.transform(tt)}}),AST_Scope.DEFMETHOD("hoist_declarations",function(compressor){var hoist_funs=compressor.option("hoist_funs"),hoist_vars=compressor.option("hoist_vars"),self=this;if(hoist_funs||hoist_vars){var dirs=[],hoisted=[],vars=new Dictionary,vars_found=0,var_decl=0;self.walk(new TreeWalker(function(node){return node instanceof AST_Scope&&node!==self?!0:node instanceof AST_Var?(++var_decl,!0):void 0})),hoist_vars=hoist_vars&&var_decl>1;var tt=new TreeTransformer(function(node){if(node!==self){if(node instanceof AST_Directive)return dirs.push(node),make_node(AST_EmptyStatement,node);if(node instanceof AST_Defun&&hoist_funs)return hoisted.push(node),make_node(AST_EmptyStatement,node);if(node instanceof AST_Var&&hoist_vars){node.definitions.forEach(function(def){vars.set(def.name.name,def),++vars_found});var seq=node.to_assignments(),p=tt.parent();return p instanceof AST_ForIn&&p.init===node?null==seq?node.definitions[0].name:seq:p instanceof AST_For&&p.init===node?seq:seq?make_node(AST_SimpleStatement,node,{body:seq}):make_node(AST_EmptyStatement,node)}if(node instanceof AST_Scope)return node}});if(self=self.transform(tt),vars_found>0){var defs=[];if(vars.each(function(def,name){self instanceof AST_Lambda&&find_if(function(x){return x.name==def.name.name},self.argnames)?vars.del(name):(def=def.clone(),def.value=null,defs.push(def),vars.set(name,def))}),defs.length>0){for(var i=0;i<self.body.length;){if(self.body[i]instanceof AST_SimpleStatement){var sym,assign,expr=self.body[i].body;if(expr instanceof AST_Assign&&"="==expr.operator&&(sym=expr.left)instanceof AST_Symbol&&vars.has(sym.name)){var def=vars.get(sym.name);if(def.value)break;def.value=expr.right,remove(defs,def),defs.push(def),self.body.splice(i,1);continue}if(expr instanceof AST_Seq&&(assign=expr.car)instanceof AST_Assign&&"="==assign.operator&&(sym=assign.left)instanceof AST_Symbol&&vars.has(sym.name)){var def=vars.get(sym.name);if(def.value)break;def.value=assign.right,remove(defs,def),defs.push(def),self.body[i].body=expr.cdr;continue}}if(self.body[i]instanceof AST_EmptyStatement)self.body.splice(i,1);else{if(!(self.body[i]instanceof AST_BlockStatement))break;var tmp=[i,1].concat(self.body[i].body);self.body.splice.apply(self.body,tmp)}}defs=make_node(AST_Var,self,{definitions:defs}),hoisted.push(defs)}}self.body=dirs.concat(hoisted,self.body)}return self}),OPT(AST_SimpleStatement,function(self,compressor){return compressor.option("side_effects")&&!self.body.has_side_effects()?(compressor.warn("Dropping side-effect-free statement [{file}:{line},{col}]",self.start),make_node(AST_EmptyStatement,self)):self}),OPT(AST_DWLoop,function(self,compressor){var cond=self.condition.evaluate(compressor);if(self.condition=cond[0],!compressor.option("loops"))return self;if(cond.length>1){if(cond[1])return make_node(AST_For,self,{body:self.body});if(self instanceof AST_While&&compressor.option("dead_code")){var a=[];return extract_declarations_from_unreachable_code(compressor,self.body,a),make_node(AST_BlockStatement,self,{body:a})}}return self}),OPT(AST_While,function(self,compressor){return compressor.option("loops")?(self=AST_DWLoop.prototype.optimize.call(self,compressor),self instanceof AST_While&&(if_break_in_loop(self,compressor),self=make_node(AST_For,self,self).transform(compressor)),self):self}),OPT(AST_For,function(self,compressor){var cond=self.condition;if(cond&&(cond=cond.evaluate(compressor),self.condition=cond[0]),!compressor.option("loops"))return self;if(cond&&cond.length>1&&!cond[1]&&compressor.option("dead_code")){var a=[];return self.init instanceof AST_Statement?a.push(self.init):self.init&&a.push(make_node(AST_SimpleStatement,self.init,{body:self.init})),extract_declarations_from_unreachable_code(compressor,self.body,a),make_node(AST_BlockStatement,self,{body:a})}return if_break_in_loop(self,compressor),self}),OPT(AST_If,function(self,compressor){if(!compressor.option("conditionals"))return self;var cond=self.condition.evaluate(compressor);if(self.condition=cond[0],cond.length>1)if(cond[1]){if(compressor.warn("Condition always true [{file}:{line},{col}]",self.condition.start),compressor.option("dead_code")){var a=[];return self.alternative&&extract_declarations_from_unreachable_code(compressor,self.alternative,a),a.push(self.body),make_node(AST_BlockStatement,self,{body:a}).transform(compressor)}}else if(compressor.warn("Condition always false [{file}:{line},{col}]",self.condition.start),compressor.option("dead_code")){var a=[];return extract_declarations_from_unreachable_code(compressor,self.body,a),self.alternative&&a.push(self.alternative),make_node(AST_BlockStatement,self,{body:a}).transform(compressor)}is_empty(self.alternative)&&(self.alternative=null);var negated=self.condition.negate(compressor),negated_is_best=best_of(self.condition,negated)===negated;if(self.alternative&&negated_is_best){negated_is_best=!1,self.condition=negated;var tmp=self.body;self.body=self.alternative||make_node(AST_EmptyStatement),self.alternative=tmp}if(is_empty(self.body)&&is_empty(self.alternative))return make_node(AST_SimpleStatement,self.condition,{body:self.condition}).transform(compressor);if(self.body instanceof AST_SimpleStatement&&self.alternative instanceof AST_SimpleStatement)return make_node(AST_SimpleStatement,self,{body:make_node(AST_Conditional,self,{condition:self.condition,consequent:self.body.body,alternative:self.alternative.body})}).transform(compressor);if(is_empty(self.alternative)&&self.body instanceof AST_SimpleStatement)return negated_is_best?make_node(AST_SimpleStatement,self,{body:make_node(AST_Binary,self,{operator:"||",left:negated,right:self.body.body})}).transform(compressor):make_node(AST_SimpleStatement,self,{body:make_node(AST_Binary,self,{operator:"&&",left:self.condition,right:self.body.body})}).transform(compressor);if(self.body instanceof AST_EmptyStatement&&self.alternative&&self.alternative instanceof AST_SimpleStatement)return make_node(AST_SimpleStatement,self,{body:make_node(AST_Binary,self,{operator:"||",left:self.condition,right:self.alternative.body})}).transform(compressor);if(self.body instanceof AST_Exit&&self.alternative instanceof AST_Exit&&self.body.TYPE==self.alternative.TYPE)return make_node(self.body.CTOR,self,{value:make_node(AST_Conditional,self,{condition:self.condition,consequent:self.body.value||make_node(AST_Undefined,self.body).optimize(compressor),alternative:self.alternative.value||make_node(AST_Undefined,self.alternative).optimize(compressor)})}).transform(compressor);if(self.body instanceof AST_If&&!self.body.alternative&&!self.alternative&&(self.condition=make_node(AST_Binary,self.condition,{operator:"&&",left:self.condition,right:self.body.condition}).transform(compressor),self.body=self.body.body),aborts(self.body)&&self.alternative){var alt=self.alternative;return self.alternative=null,make_node(AST_BlockStatement,self,{body:[self,alt]}).transform(compressor)}if(aborts(self.alternative)){var body=self.body;return self.body=self.alternative,self.condition=negated_is_best?negated:self.condition.negate(compressor),self.alternative=null,make_node(AST_BlockStatement,self,{body:[self,body]}).transform(compressor)}return self}),OPT(AST_Switch,function(self,compressor){if(0==self.body.length&&compressor.option("conditionals"))return make_node(AST_SimpleStatement,self,{body:self.expression}).transform(compressor);for(;;){var last_branch=self.body[self.body.length-1];if(last_branch){var stat=last_branch.body[last_branch.body.length-1];if(stat instanceof AST_Break&&loop_body(compressor.loopcontrol_target(stat.label))===self&&last_branch.body.pop(),last_branch instanceof AST_Default&&0==last_branch.body.length){self.body.pop();continue}}break}var exp=self.expression.evaluate(compressor);out:if(2==exp.length)try{if(self.expression=exp[0],!compressor.option("dead_code"))break out;var value=exp[1],in_if=!1,in_block=!1,started=!1,stopped=!1,ruined=!1,tt=new TreeTransformer(function(node,descend,in_list){if(node instanceof AST_Lambda||node instanceof AST_SimpleStatement)return node;if(node instanceof AST_Switch&&node===self)return node=node.clone(),descend(node,this),ruined?node:make_node(AST_BlockStatement,node,{body:node.body.reduce(function(a,branch){return a.concat(branch.body)},[])}).transform(compressor);if(node instanceof AST_If||node instanceof AST_Try){var save=in_if;return in_if=!in_block,descend(node,this),in_if=save,node}if(node instanceof AST_StatementWithBody||node instanceof AST_Switch){var save=in_block;return in_block=!0,descend(node,this),in_block=save,node}if(node instanceof AST_Break&&this.loopcontrol_target(node.label)===self)return in_if?(ruined=!0,node):in_block?node:(stopped=!0,in_list?MAP.skip:make_node(AST_EmptyStatement,node));if(node instanceof AST_SwitchBranch&&this.parent()===self){if(stopped)return MAP.skip;if(node instanceof AST_Case){var exp=node.expression.evaluate(compressor);if(exp.length<2)throw self;return exp[1]===value||started?(started=!0,aborts(node)&&(stopped=!0),descend(node,this),node):MAP.skip}return descend(node,this),node}});tt.stack=compressor.stack.slice(),self=self.transform(tt)}catch(ex){if(ex!==self)throw ex}return self}),OPT(AST_Case,function(self,compressor){return self.body=tighten_body(self.body,compressor),self}),OPT(AST_Try,function(self,compressor){return self.body=tighten_body(self.body,compressor),self}),AST_Definitions.DEFMETHOD("remove_initializers",function(){this.definitions.forEach(function(def){def.value=null})}),AST_Definitions.DEFMETHOD("to_assignments",function(){var assignments=this.definitions.reduce(function(a,def){if(def.value){var name=make_node(AST_SymbolRef,def.name,def.name);
a.push(make_node(AST_Assign,def,{operator:"=",left:name,right:def.value}))}return a},[]);return 0==assignments.length?null:AST_Seq.from_array(assignments)}),OPT(AST_Definitions,function(self){return 0==self.definitions.length?make_node(AST_EmptyStatement,self):self}),OPT(AST_Function,function(self,compressor){return self=AST_Lambda.prototype.optimize.call(self,compressor),compressor.option("unused")&&self.name&&self.name.unreferenced()&&(self.name=null),self}),OPT(AST_Call,function(self,compressor){if(compressor.option("unsafe")){var exp=self.expression;if(exp instanceof AST_SymbolRef&&exp.undeclared())switch(exp.name){case"Array":if(1!=self.args.length)return make_node(AST_Array,self,{elements:self.args});break;case"Object":if(0==self.args.length)return make_node(AST_Object,self,{properties:[]});break;case"String":return 0==self.args.length?make_node(AST_String,self,{value:""}):make_node(AST_Binary,self,{left:self.args[0],operator:"+",right:make_node(AST_String,self,{value:""})});case"Function":if(all(self.args,function(x){return x instanceof AST_String}))try{var code="(function("+self.args.slice(0,-1).map(function(arg){return arg.value}).join(",")+"){"+self.args[self.args.length-1].value+"})()",ast=parse(code);ast.figure_out_scope();var comp=new Compressor(compressor.options);ast=ast.transform(comp),ast.figure_out_scope(),ast.mangle_names();var fun=ast.body[0].body.expression,args=fun.argnames.map(function(arg,i){return make_node(AST_String,self.args[i],{value:arg.print_to_string()})}),code=OutputStream();return AST_BlockStatement.prototype._codegen.call(fun,fun,code),code=code.toString().replace(/^\{|\}$/g,""),args.push(make_node(AST_String,self.args[self.args.length-1],{value:code})),self.args=args,self}catch(ex){ex instanceof JS_Parse_Error?(compressor.warn("Error parsing code passed to new Function [{file}:{line},{col}]",self.args[self.args.length-1].start),compressor.warn(ex.toString())):console.log(ex)}}else if(exp instanceof AST_Dot&&"toString"==exp.property&&0==self.args.length)return make_node(AST_Binary,self,{left:make_node(AST_String,self,{value:""}),operator:"+",right:exp.expression}).transform(compressor)}return compressor.option("side_effects")&&self.expression instanceof AST_Function&&0==self.args.length&&!AST_Block.prototype.has_side_effects.call(self.expression)?make_node(AST_Undefined,self).transform(compressor):self}),OPT(AST_New,function(self,compressor){if(compressor.option("unsafe")){var exp=self.expression;if(exp instanceof AST_SymbolRef&&exp.undeclared())switch(exp.name){case"Object":case"RegExp":case"Function":case"Error":case"Array":return make_node(AST_Call,self,self).transform(compressor)}}return self}),OPT(AST_Seq,function(self,compressor){if(!compressor.option("side_effects"))return self;if(!self.car.has_side_effects()){var p;if(!(self.cdr instanceof AST_SymbolRef&&"eval"==self.cdr.name&&self.cdr.undeclared()&&(p=compressor.parent())instanceof AST_Call&&p.expression===self))return self.cdr}if(compressor.option("cascade")){if(self.car instanceof AST_Assign&&!self.car.left.has_side_effects()&&self.car.left.equivalent_to(self.cdr))return self.car;if(!self.car.has_side_effects()&&!self.cdr.has_side_effects()&&self.car.equivalent_to(self.cdr))return self.car}return self}),AST_Unary.DEFMETHOD("lift_sequences",function(compressor){if(compressor.option("sequences")&&this.expression instanceof AST_Seq){var seq=this.expression,x=seq.to_array();return this.expression=x.pop(),x.push(this),seq=AST_Seq.from_array(x).transform(compressor)}return this}),OPT(AST_UnaryPostfix,function(self,compressor){return self.lift_sequences(compressor)}),OPT(AST_UnaryPrefix,function(self,compressor){self=self.lift_sequences(compressor);var e=self.expression;if(compressor.option("booleans")&&compressor.in_boolean_context()){switch(self.operator){case"!":if(e instanceof AST_UnaryPrefix&&"!"==e.operator)return e.expression;break;case"typeof":return compressor.warn("Boolean expression always true [{file}:{line},{col}]",self.start),make_node(AST_True,self)}e instanceof AST_Binary&&"!"==self.operator&&(self=best_of(self,e.negate(compressor)))}return self.evaluate(compressor)[0]}),AST_Binary.DEFMETHOD("lift_sequences",function(compressor){if(compressor.option("sequences")){if(this.left instanceof AST_Seq){var seq=this.left,x=seq.to_array();return this.left=x.pop(),x.push(this),seq=AST_Seq.from_array(x).transform(compressor)}if(this.right instanceof AST_Seq&&"||"!=this.operator&&"&&"!=this.operator&&!this.left.has_side_effects()){var seq=this.right,x=seq.to_array();return this.right=x.pop(),x.push(this),seq=AST_Seq.from_array(x).transform(compressor)}}return this});var commutativeOperators=makePredicate("== === != !== * & | ^");OPT(AST_Binary,function(self,compressor){function reverse(op,force){if(force||!self.left.has_side_effects()&&!self.right.has_side_effects()){op&&(self.operator=op);var tmp=self.left;self.left=self.right,self.right=tmp}}if(commutativeOperators(self.operator)&&self.right instanceof AST_Constant&&!(self.left instanceof AST_Constant)&&reverse(null,!0),self=self.lift_sequences(compressor),compressor.option("comparisons"))switch(self.operator){case"===":case"!==":(self.left.is_string(compressor)&&self.right.is_string(compressor)||self.left.is_boolean()&&self.right.is_boolean())&&(self.operator=self.operator.substr(0,2));case"==":case"!=":self.left instanceof AST_String&&"undefined"==self.left.value&&self.right instanceof AST_UnaryPrefix&&"typeof"==self.right.operator&&compressor.option("unsafe")&&(self.right.expression instanceof AST_SymbolRef&&self.right.expression.undeclared()||(self.right=self.right.expression,self.left=make_node(AST_Undefined,self.left).optimize(compressor),2==self.operator.length&&(self.operator+="=")))}if(compressor.option("booleans")&&compressor.in_boolean_context())switch(self.operator){case"&&":var ll=self.left.evaluate(compressor),rr=self.right.evaluate(compressor);if(ll.length>1&&!ll[1]||rr.length>1&&!rr[1])return compressor.warn("Boolean && always false [{file}:{line},{col}]",self.start),make_node(AST_False,self);if(ll.length>1&&ll[1])return rr[0];if(rr.length>1&&rr[1])return ll[0];break;case"||":var ll=self.left.evaluate(compressor),rr=self.right.evaluate(compressor);if(ll.length>1&&ll[1]||rr.length>1&&rr[1])return compressor.warn("Boolean || always true [{file}:{line},{col}]",self.start),make_node(AST_True,self);if(ll.length>1&&!ll[1])return rr[0];if(rr.length>1&&!rr[1])return ll[0];break;case"+":var ll=self.left.evaluate(compressor),rr=self.right.evaluate(compressor);if(ll.length>1&&ll[0]instanceof AST_String&&ll[1]||rr.length>1&&rr[0]instanceof AST_String&&rr[1])return compressor.warn("+ in boolean context always true [{file}:{line},{col}]",self.start),make_node(AST_True,self)}var exp=self.evaluate(compressor);if(exp.length>1&&best_of(exp[0],self)!==self)return exp[0];if(compressor.option("comparisons")){if(!(compressor.parent()instanceof AST_Binary)||compressor.parent()instanceof AST_Assign){var negated=make_node(AST_UnaryPrefix,self,{operator:"!",expression:self.negate(compressor)});self=best_of(self,negated)}switch(self.operator){case"<":reverse(">");break;case"<=":reverse(">=")}}return"+"==self.operator&&self.right instanceof AST_String&&""===self.right.getValue()&&self.left instanceof AST_Binary&&"+"==self.left.operator&&self.left.is_string(compressor)?self.left:self}),OPT(AST_SymbolRef,function(self,compressor){if(self.undeclared()){var defines=compressor.option("global_defs");if(defines&&defines.hasOwnProperty(self.name))return make_node_from_constant(compressor,defines[self.name],self);switch(self.name){case"undefined":return make_node(AST_Undefined,self);case"NaN":return make_node(AST_NaN,self);case"Infinity":return make_node(AST_Infinity,self)}}return self}),OPT(AST_Undefined,function(self,compressor){if(compressor.option("unsafe")){var scope=compressor.find_parent(AST_Scope),undef=scope.find_variable("undefined");if(undef){var ref=make_node(AST_SymbolRef,self,{name:"undefined",scope:scope,thedef:undef});return ref.reference(),ref}}return self});var ASSIGN_OPS=["+","-","/","*","%",">>","<<",">>>","|","^","&"];OPT(AST_Assign,function(self,compressor){return self=self.lift_sequences(compressor),"="==self.operator&&self.left instanceof AST_SymbolRef&&self.right instanceof AST_Binary&&self.right.left instanceof AST_SymbolRef&&self.right.left.name==self.left.name&&member(self.right.operator,ASSIGN_OPS)&&(self.operator=self.right.operator+"=",self.right=self.right.right),self}),OPT(AST_Conditional,function(self,compressor){if(!compressor.option("conditionals"))return self;if(self.condition instanceof AST_Seq){var car=self.condition.car;return self.condition=self.condition.cdr,AST_Seq.cons(car,self)}var cond=self.condition.evaluate(compressor);if(cond.length>1)return cond[1]?(compressor.warn("Condition always true [{file}:{line},{col}]",self.start),self.consequent):(compressor.warn("Condition always false [{file}:{line},{col}]",self.start),self.alternative);var negated=cond[0].negate(compressor);best_of(cond[0],negated)===negated&&(self=make_node(AST_Conditional,self,{condition:negated,consequent:self.alternative,alternative:self.consequent}));var consequent=self.consequent,alternative=self.alternative;return consequent instanceof AST_Assign&&alternative instanceof AST_Assign&&consequent.operator==alternative.operator&&consequent.left.equivalent_to(alternative.left)&&(self=make_node(AST_Assign,self,{operator:consequent.operator,left:consequent.left,right:make_node(AST_Conditional,self,{condition:self.condition,consequent:consequent.right,alternative:alternative.right})})),self}),OPT(AST_Boolean,function(self,compressor){if(compressor.option("booleans")){var p=compressor.parent();return p instanceof AST_Binary&&("=="==p.operator||"!="==p.operator)?(compressor.warn("Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]",{operator:p.operator,value:self.value,file:p.start.file,line:p.start.line,col:p.start.col}),make_node(AST_Number,self,{value:+self.value})):make_node(AST_UnaryPrefix,self,{operator:"!",expression:make_node(AST_Number,self,{value:1-self.value})})}return self}),OPT(AST_Sub,function(self,compressor){var prop=self.property;return prop instanceof AST_String&&compressor.option("properties")&&(prop=prop.getValue(),compressor.option("screw_ie8")&&RESERVED_WORDS(prop)||!RESERVED_WORDS(prop)&&is_identifier_string(prop))?make_node(AST_Dot,self,{expression:self.expression,property:prop}):self}),OPT(AST_Array,literals_in_boolean_context),OPT(AST_Object,literals_in_boolean_context),OPT(AST_RegExp,literals_in_boolean_context)}();